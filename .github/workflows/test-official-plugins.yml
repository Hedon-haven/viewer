name: Test official plugins
on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *' # Every day at midnight UTC
jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"

      - name: Disable flutter/dart analytics
        run: |
          dart --disable-analytics
          flutter config --disable-analytics

      - name: Get all official plugins
        id: generate-matrix
        run: |
          # generate mocks
          flutter pub get
          flutter pub run build_runner build
          # Run the flutter-test script
          ALL_PLUGINS=$(flutter test --no-pub --reporter silent test/utils/print_all_official_plugins.dart)
          echo "All plugins: $ALL_PLUGINS"
          echo "matrix=$ALL_PLUGINS" >> "$GITHUB_OUTPUT"

  run-jobs:
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      # don't cancel other tests if one fails
      fail-fast: false
      matrix:
        plugin: ${{ fromJSON(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"

      - name: Disable flutter/dart analytics
        run: |
          dart --disable-analytics
          flutter config --disable-analytics

      - name: Connect to www.vpngate.net via openVPN
        run: |
          REAL_IP=$(curl ifconfig.me)
          echo "Real IP: $REAL_IP"
          sudo apt-get update && sudo apt-get install -y openvpn
          sudo openvpn --daemon --log /dev/stdout --data-ciphers AES-256-GCM:AES-128-GCM:AES-256-CBC:AES-128-CBC:CHACHA20-POLY1305 --config .github/vpngate_openvpn.ovpn
          echo "Waiting for VPN to connect for 60 seconds"
          sleep 60
          NEW_IP=$(curl ifconfig.me)
          echo "New IP: $NEW_IP"
          # Make sure the ip changed
          if [ "$REAL_IP" == "$NEW_IP" ]; then
            echo "Couldn't connect to VPN."
            exit 1
          fi


      - name: Testing ${{ matrix.plugin }}
        run: |
          flutter pub get
          flutter pub run build_runner build
          
          # fix for quickjs plugin library.so not found error
          export LIBQUICKJSC_TEST_PATH="$PWD/.github/libquickjs_c_bridge_plugin.so"
          
          PLUGIN=${{ matrix.plugin }} flutter test --no-pub test/official_plugins_test.dart

      # Disconnect before uploading dumps
      - name: Disconnect from openVPN
        run: sudo killall openvpn

      - name: Upload dumps
        # This ensures the dumps are uploaded even if the testing step will cause the job itself to fail
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.plugin }}_dumps
          path: dumps/
